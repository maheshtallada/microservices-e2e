Make sure folder names doesn't have spaces to avoid any issues in configuring and running microservices
-------------------------------------------------------------------------------------------	

1. we have added spring-cloud-starter-config dependency while creating the project
2. As this is a config-client, we need a config-server to connect to
3. In earlier versions, without even configuring the config-server, config client project would be up and running.
4. However, from latest versions, we need to add below property in application.properties until the config-server is created
	spring.config.import=optional:configserver:http://localhost:8888	
5. Later, we can remove the word optional
-------------------------------------------------------------------------------------------	
Spring cloud version, we a re using is 2021.0.3 and thast of spring boot is 2.7.2
-------------------------------------------------------------------------------------------	

@Value -- usage in full extent:: https://www.baeldung.com/spring-value-annotation 
-------------------------------------------------------------------------------------------

Configuration Management :: 

1. In any service with business logic say limits-service here, 
	add config-client/spring-cloud-starter-config dependency to make it a client
2. create a new project just with config-server/spring-cloud-config-server dependency
	-- devtools, lombok and any other supporting dependencies can be added
----till the previous commit, the above two steps are added
3.	Now we have to create a repo, created a local repo for now (create folder and do git init) and 
	created a limits-service.properties
-------------------------------------------------------------------------------------------

Steps to debug issues if any ::
https://github.com/in28minutes/spring-microservices-v2/blob/main/03.microservices/01-step-by-step-changes/microservices-v2-1.md#spring-cloud-config-server---steps-01-to-08
-------------------------------------------------------------------------------------------
4. With this step 
	i. we connected git repo to config-server by adding the property	
		spring.cloud.config.server.git.uri=<for-now-local-path-as-we-have-local-repo>
	ii. add @EnableConfigServer to the class with @SpringBootApplication in the config-server project
	iii. now we can retrive properties from git repo through GET 
			http::/localhost:8888/<filename-of-properties-without-extension>/<profile>	
			(http://localhost:8888/limits-service/default)
-------------------------------------------------------------------------------------------
5. To connect limits-service to config-server, spring-cloud-starter-config dependency is needed, which we added already
	-- Now, add property spring.application.name=limits-service
		which is spring.application.name=<name of the property file without ext form the git-config-repo>
	-- Now we should be able to fetch the value from git repo in limit-service
-------------------------------------------------------------------------------------------
Values in application.properties have less priority than those of in git repo
-------------------------------------------------------------------------------------------

Configuring profiles ::
	As we know, generally in spring boot, we will add various application.properties files and set the profile through a 
	separate property spring.profiles.active=<desired_profile>
	
	-- Similiarly in MS, now we need to add multiple files in git repo and set the profile in limits-service
	-- However, to make env-specific configuration work, we need to add one more property
			spring.cloud
--------------------------------------------------------------------------------------------
Actually, if we observe, the value of spring.application.name is used for the properties files (ex:limit-service.properties) in git-config-repo.

However if we want to give the properties files a different name, we have an optional	
	-- i.e., spring.cloud.config.name=<name_of_the_properties_file_without_ext>
--------------------------------------------------------------------------------------------
while retrieving the port we are running on, we chose Environment class, however we have to choose from below package
import org.springframework.core.env.Environment;

and from getProperty("local.server.port")
--------------------------------------------------------------------------------------------
How to run same project in a new instane with different port ?

Navigate to Run-> Run Configurations OR rightclick on springbootapplcation main class-> run as -> run configurations

	-- We can see the avaliable projects -- right click and select duplicate.
	-- name the original one and this duplicate one with proper naming, preferably with port added 
	-- for the new one, in VM arguments --> we can give "-Dserver.port=8081" -> apply -> and run
--------------------------------------------------------------------------------------------

JPA props explained : 

			---------------------------------
			spring.jpa.show-sql=true

				-- to see all sql statements generated
			---------------------------------	
			spring.h2.console.enabled=true

				--to see the details present in Database
			---------------------------------
			spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=USER

				this is to make the url constant, else each time the project run, there will be a new url 
			---------------------------------
			spring.jpa.defer-datasource-initialization=true

				-- In latest versions (check, from which version) the data.sql file will be executed even before the code is executed. i.e., even before the table is created.
				-- to avoid that, we have to have this property
			---------------------------------
			spring.data.jpa.repositories.bootstrap-mode=default

				-- need to know
---------------------------------------------------------------------------------------------------
NOTE : "from" is a keyword in sql, so have we named the column differently from java bean's field
---------------------------------------------------------------------------------------------------










