Make sure folder names doesn't have spaces to avoid any issues in configuring and running microservices
-------------------------------------------------------------------------------------------	

1. we have added spring-cloud-starter-config dependency while creating the project
2. As this is a config-client, we need a config-server to connect to
3. In earlier versions, without even configuring the config-server, config client project would be up and running.
4. However, from latest versions, we need to add below property in application.properties until the config-server is created
	spring.config.import=optional:configserver:http://localhost:8888	
5. Later, we can remove the word optional
-------------------------------------------------------------------------------------------	
Spring cloud version, we a re using is 2021.0.3 and thast of spring boot is 2.7.2
-------------------------------------------------------------------------------------------	

@Value -- usage in full extent:: https://www.baeldung.com/spring-value-annotation 
-------------------------------------------------------------------------------------------

Configuration Management :: 

1. In any service with business logic say limits-service here, 
	add config-client/spring-cloud-starter-config dependency to make it a client
2. create a new project just with config-server/spring-cloud-config-server dependency
	-- devtools, lombok and any other supporting dependencies can be added
----till the previous commit, the above two steps are added
3.	Now we have to create a repo, created a local repo for now (create folder and do git init) and 
	created a limits-service.properties
-------------------------------------------------------------------------------------------

Steps to debug issues if any ::
https://github.com/in28minutes/spring-microservices-v2/blob/main/03.microservices/01-step-by-step-changes/microservices-v2-1.md#spring-cloud-config-server---steps-01-to-08
-------------------------------------------------------------------------------------------
4. With this step 
	i. we connected git repo to config-server by adding the property	
		spring.cloud.config.server.git.uri=<for-now-local-path-as-we-have-local-repo>
	ii. add @EnableConfigServer to the class with @SpringBootApplication in the config-server project
	iii. now we can retrive properties from git repo through GET 
			http::/localhost:8888/<filename-of-properties-without-extension>/<profile>	
			(http://localhost:8888/limits-service/default)
-------------------------------------------------------------------------------------------
5. To connect limits-service to config-server, spring-cloud-starter-config dependency is needed, which we added already
	-- Now, add property spring.application.name=limits-service
		which is spring.application.name=<name of the property file without ext form the git-config-repo>
	-- Now we should be able to fetch the value from git repo in limit-service
-------------------------------------------------------------------------------------------
Values in application.properties have less priority than those of in git repo
-------------------------------------------------------------------------------------------

Configuring profiles ::
	As we know, generally in spring boot, we will add various application.properties files and set the profile through a 
	separate property spring.profiles.active=<desired_profile>
	
	-- Similiarly in MS, now we need to add multiple files in git repo and set the profile in limits-service
	-- However, to make env-specific configuration work, we need to add one more property
			spring.cloud
--------------------------------------------------------------------------------------------
Actually, if we observe, the value of spring.application.name is used for the properties files (ex:limit-service.properties) in git-config-repo.

However if we want to give the properties files a different name, we have an optional	
	-- i.e., spring.cloud.config.name=<name_of_the_properties_file_without_ext>
--------------------------------------------------------------------------------------------
while retrieving the port we are running on, we chose Environment class, however we have to choose from below package
import org.springframework.core.env.Environment;

and from getProperty("local.server.port")
--------------------------------------------------------------------------------------------
How to run same project in a new instane with different port ?

Navigate to Run-> Run Configurations OR rightclick on springbootapplcation main class-> run as -> run configurations

	-- We can see the avaliable projects -- right click and select duplicate.
	-- name the original one and this duplicate one with proper naming, preferably with port added 
	-- for the new one, in VM arguments --> we can give "-Dserver.port=8081" -> apply -> and run
--------------------------------------------------------------------------------------------

JPA props explained : 

			---------------------------------
			spring.jpa.show-sql=true

				-- to see all sql statements generated
			---------------------------------	
			spring.h2.console.enabled=true

				--to see the details present in Database
			---------------------------------
			spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=USER

				this is to make the url constant, else each time the project run, there will be a new url 
			---------------------------------
			spring.jpa.defer-datasource-initialization=true

				-- In latest versions (check, from which version) the data.sql file will be executed even before the code is executed. i.e., even before the table is created.
				-- to avoid that, we have to have this property
			---------------------------------
			spring.data.jpa.repositories.bootstrap-mode=default

				-- need to know
---------------------------------------------------------------------------------------------------
NOTE : "from" is a keyword in sql, so have we named the column differently from java bean's field
---------------------------------------------------------------------------------------------------
Feign Client intro :

1. In the previous step, to call currency exchange servie, we used a RestTemplate and passed variables in a map, which becomes tedious to 
	call various services from each-other.
	
2. Here comes feign, add the below dependency in currency-conversion-service

<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>

3. Add @EnableFeignClients in currency-conversion-service application class (on with @SBA) which is the source microservice
4. Add a proxy interface in currency-conversion-service and add 
	@FeignClient(name="<application-name-of the app we need to call>", url="<url-of-the-app-we-gonna-call-without-specific-resource>")
	
	Ex: from curr-conv-ser, we need to call curr-exc-ser, so add this interface in curr-conv-ser with
		@FeignClient(name="currency-exchange", url="localhost:8000")
		
	4.1 The specific url of a service we will be calling need to be mentioned in a method declaration (not definition)
		-- @GetMapping("currency-exchange/from/{from}/to/{to}")
	
	By this, we understood that, to call exc-ser from conv-ser, we need to work in conv-ser only, ntg to do with exc-ser
---------------------------------------------------------------------------------------------------

However, we hardcoded the url of the cur-exc ser in proxy, what if we want to make it to talk to a different instance, we can't change it in code, we need some kind of flexibility to change the instance based on load, which is possible through service discovery and load balancing
---------------------------------------------------------------------------------------------------
Service Resgistry :
1. All the instances of all the microservices register with service-registry OR Naming-server.
2. the one needs to communicate with other, will request what are all the addresses of the required service
3. Then with help of load balancer, calls the particular instance
4. popular naming server is Eureka Server
5. Default port for naming server is 8761, similar to config sever having 8888

Code :
1. Add a new project with <Eureka server> dependency, and otherr if required like dev tools, actuator
2. add @EnableEurekaServer
3. Add properties for adding standard port, spring.application.name and 2 properties to avoid the application not to register with itself

raw test: 
open http://localhost:8761/ to observe the eureka server's UI with "No instances available" under "Instances currently registered with Eureka"
---------------------------------------------------------------------------------------------------
Registering the eureka-clients with eureka-sever
1. As we added, naming-server, we need to make our services with business logic(we call them eureka-clients) register with above created Eureka-server. Just need to add Eureka client dependency.!	
2. Just by adding, ideally the conn b/w eureka client and sevre is done, 
	However, adding this prop will makesure the connection is in place without any doubts
	"eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka"
3. without this prop, there might be a warning shown in Eureka server UI.	
---------------------------------------------------------------------------------------------------
Load Balancing ::
1. Earlier, in cur-conv-ser, we hardcoded the url localhost:8100 in proxy interface, however we can just remove that now as we made the apps - eureka clients.
2. just remove 
	url="localhost:8000"
	from
	@FeignClient(name="currency-exchange", url="localhost:8000")
	in CurrencyExchangeProxy class
3. We can see the application is still running. the url is provided by eureka-server
4. Now, run the cur-exc-ser in diff port from run configurations and check in eureka-server's UI for no. of instances of cu-exc-ser
5. try to call the rest service in cur-exc-ser multiple times with less span and we can observe the diff in port no.

Internals :
1. this is called client side load balancing, being done by FEIGN
2. loadbalancer jars are added through eureka-client dependency
3. FEIGN uses this framework to distribute the load.

NOTE : Here Load Balancing is done with help of Eureka-client and FEIGN, if we choose other ways for service discovery and internal calling of micro-services, there will be a different process for Load balancing
---------------------------------------------------------------------------------------------------
Spring Cloud API Gateway :: To Route APIs && provides cross cutting concerns like security, monitoring/metrics and Resiliency

Zuul is no longer supported.
Spring Cloud is recommended now.

Code :
1. add eureka client and gateway with devtools and actuator
2. Along with spring.application.name and server.port=8765(API gateway specifi), we will add
	eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
	to mention explicitly that this app is connected to eureka-server
---------------------------------------------------------------------------------------------------






